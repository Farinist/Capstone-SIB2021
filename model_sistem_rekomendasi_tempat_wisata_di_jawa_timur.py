# -*- coding: utf-8 -*-
"""Model Sistem Rekomendasi Tempat Wisata di Jawa Timur.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fxwSSE2ZGgAs37Sg7ozLVdymw-v5MBUH

# **Sistem Rekomendasi**: Rekomendasi Tempat Wisata di Jawa Timur dengan Content-based Filtering
---
##### Oleh : Samuel Partogi Pakpahan dan Farin Istighfarizky
##### Capstone Project - Studi Independen Bersertifikat x Dicoding

# **Pendahuluan**

Pada proyek ini akan dibuat sistem rekomendasi tempat wisata di Jawa Timur menggunakan ***content-based filtering***. Untuk memudahkan navigasi gunakan menu *Table of Contents* di kanan atas Google Colaboratory.

# **1. Mengimpor library yang dibutuhkan**
"""

# Untuk pengolahan data
import pandas as pd
import numpy as np

"""# **2. Mempersiapkan Dataset dan Pemahaman Data** ***(Data Understanding)***

![Sampul Dataset](https://raw.githubusercontent.com/samuelpakpahan20/Capstone-SIB2021/master/images/sampul.PNG)

Informasi Dataset :

Jenis | Keterangan
--- | ---
Sumber | [Kaggle Dataset : Info Tempat Wisata](https://www.kaggle.com/azharianisah/infotempatwisata)
Lisensi | CC0: Public Domain
Rating Penggunaan | 0.0
Jenis dan Ukuran Berkas | zip (46 kB)

## Memuat Data pada sebuah Dataframe menggunakan *pandas*
"""

# Memuat data pada dataframe di setiap variable
wisata = pd.read_excel("InfoWisata.xlsx")
rating = pd.read_excel("Reviewer.xlsx")

# Pratinjau dataset wisata
wisata.head()

# Pratinjau dataset rating
rating.head()

# Melihat distribusi rating pada data
rating.describe()

"""Dari output di atas, diketahui bahwa nilai maksimum rating adalah 5 dan nilai minimumnya adalah 3.5. Artinya, skala rating berkisar antara 3.5 hingga 5.

# **3. Data Preprocessing**

## Menggabungkan Data Tempat Wisata dengan Data Rating
Tujuannya, agar dapat lebih mudah melihat rating pengguna terhadap suatu tempat wisata.
"""

all_wisata = pd.concat([wisata,rating[['Rating','Review']]], axis=1)
all_wisata

"""# **4. Persiapan Data** ***(Data Preparation)***

## 4.1 Menghapus kolom yang tidak diperlukan
Dari pratinjau diatas, dapat dilihat bahwa kolom `Unnamed: 0` dari awal sudah ada dan kolom ini tidak berhubungan sama projek ini, maka perlu dihapus dengan teknik `drop`.
"""

all_wisata_clean = all_wisata.drop(columns = ['Unnamed: 0'])
all_wisata_clean.head()

"""## 4.2 Menangani Missing Value"""

# Mengecek missing value pada dataframe all_wisata_clean
all_wisata_clean.isnull().sum()

"""## 4.3 Menyamakan Kategori Tempat Wisata
Sebelum masuk tahap akhir (pemodelan), lakukan penyamaan nama kategori tempat wisata. Kadang, tempat wisata yang sama memiliki kategori yang berbeda. Jika dibiarkan, hal ini bisa menyebabkan bias pada data.

Pertama, cek ulang data setelah proses cleaning pada tahap sebelumnya. Buat variabel baru bernama `fix_wisata` untuk menyimpan dataframe.
"""

fix_wisata = all_wisata_clean
fix_wisata

"""Selanjutnya, cek kolom `Category` (kategori tempat wisata) yang unik"""

fix_wisata['Category '].unique()

"""Perhatikanlah, di antara semua kategori tempat wisata pada data, ada kategori yang menjadi 2 (duplikat), yaitu kategori tempat wisata bernama `Air Terjun` dan `Museum`. Jika dilihat dengan seksama, yang membedakan kategori tersebut adalah terdapat spasi di akhir katanya.
Hal-hal seperti ini kadang dapat ditemukan pada data. Penyebabnya bisa beragam, misalnya, kesalahan input data. Jika menemukan data seperti ini, hal yang perlu dilakukan adalah mengeksplorasi datanya lebih lanjut dan melakukan analisis. 

Dari proses analisis, kita akan memahami perbedaan penamaan ini terjadi pada data mana saja dan apa yang bisa kita lakukan untuk mengatasinya. Tentu solusi untuk permasalahan seperti ini akan berbeda tergantung kasusnya. Untuk kasus pada proyek ini, kita akan memilih salah satu penamaan kategori saja untuk digunakan pada data dan mengganti nama kategorinya menjadi tanpa spasi.
"""

# Mengecek kategori tempat wisata Air Terjun (tanpa spasi)
fix_wisata[fix_wisata['Category '] == 'Air Terjun']

# Mengecek kategori tempat wisata Air Terjun (dengan spasi)
fix_wisata[fix_wisata['Category '] == 'Air Terjun ']

"""Dalam sistem rekomendasi ini yang kita kembangkan, penting untuk memastikan satu tempat wisata mewakili satu kategori tempat wisata. Tujuannya supaya tidak terjadi dobel atau rangkap kategori dalam satu tempat wisata. Sehingga, sistem dapat merekomendasikan tempat wisata berdasarkan kategori tempat wisatanya."""

fix_wisata = fix_wisata.replace('Gunung ', 'Gunung')
fix_wisata = fix_wisata.replace('Pantai ', 'Pantai')
fix_wisata = fix_wisata.replace(['Air Terjun ','Air Terjun'], 'Air_Terjun')
fix_wisata = fix_wisata.replace('Taman Hiburan ', 'Taman_Hiburan')
fix_wisata = fix_wisata.replace('Museum ', 'Museum')
fix_wisata['Category '].unique()

"""Sekarang, semua kategori tempat wisata telah berubah menjadi tanpa spasi. Untuk kategori tempat wisata yang lebih dari satu kata, dipisah dengan karakter `underscore` (_). Hal ini dilakukan agar memudahkan saat pemodelan.

## 4.4 Tahap Persiapan
"""

# Membuat variabel preparation yang berisi dataframe fix_wisata
preparation = fix_wisata
preparation

"""Selanjutnya, mengkonversi data series menjadi list. Dalam hal ini, gunakan fungsi `tolist()` dari library numpy."""

# Mengonversi data series ‘Category’ menjadi dalam bentuk list
wisata_category = preparation['Category '].tolist()
 
# Mengonversi data series ‘Name’ menjadi dalam bentuk list
wisata_name = preparation['Name '].tolist()
 
# Mengonversi data series ‘City’ menjadi dalam bentuk list
wisata_city = preparation['City'].tolist()
 
print(len(wisata_category))
print(len(wisata_name))
print(len(wisata_city))

"""Tahap berikutnya, membuat dictionary untuk menentukan pasangan key-value pada data `wisata_category`, `wisata_name`, dan `wisata_city` yang telah disiapkan sebelumnya."""

# Membuat dictionary untuk data ‘wisata_category’, ‘wisata_name’, dan ‘wisata_city’
wisata_new = pd.DataFrame({
    'Category': wisata_category,
    'Nama wisata': wisata_name,
    'City': wisata_city
})
wisata_new

"""# **5. Model Development dengan Content Based Filtering**

Sebelumnya, lakukan pengecekan data kembali dan assign dataframe dari tahap Preparation ke dalam variabel data
"""

data = wisata_new
data.sample(5)

"""## 5.1 TF-IDF Vectorizer
Pada tahap ini akan membangun sistem rekomendasi sederhana berdasarkan kategori tempat wisata, dengan menggunakan fungsi `tfidfvectorizer()` dari library `sklearn`.
"""

from sklearn.feature_extraction.text import TfidfVectorizer
 
# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data kategory
tf.fit(data['Category']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

"""Selanjutnya, lakukan fit dan transformasi ke dalam bentuk matriks. """

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(data['Category']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

"""Perhatikanlah, hasil matriks berukuran (100, 6). Nilai 100 merupakan ukuran data dan 22 merupakan matrik kategori tempat wisata. 

Untuk menghasilkan vektor tf-idf dalam bentuk matriks, gunakan fungsi `todense()`.
"""

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

"""Selanjutnya, mari kita lihat matriks tf-idf untuk beberapa tempat wisata (Nama wisata) dan kategori tempat wisata (Category)."""

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan kategori tempat wisata
# Baris diisi dengan nama tempat wisata
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=data['Nama wisata']
).sample(6, axis=1).sample(10, axis=0)

"""Output matriks tf-idf di atas menunjukkan tempat wisata Goa Putih memiliki kategori air terjun. Goa Putih, matriks menunjukan bahwa tempat wisata tersebut merupakan tempat wisata dengan kategori air terjun. Hal ini terlihat dari nilai matriks 1.0 pada kategori air terjun. Selanjutnya, tempat wisata Kedung Tumpang termasuk dalam kategori pantai. Sedangkan, tempat wisata Museum Majapahit termasuk dalam kategori museum. Demikian seterusnya. 

Sampai di sini, kita telah berhasil mengidentifikasi representasi fitur penting dari setiap kategori tempat wisata dengan fungsi `tfidfvectorizer`. Kita juga telah menghasilkan matriks yang menunjukkan korelasi antara kategori tempat wisata dengan tempat wisata. Selanjutnya, kita akan menghitung derajat kesamaan antara satu tempat wisata dengan tempat wisata lainnya untuk menghasilkan kandidat tempat wisata yang akan direkomendasikan.

## 5.2 Cosine Similarity
Pada tahap sebelumnya, telah dilakukan identifikasi korelasi antara tempat wisata dengan kategorinya. Sekarang, lakukan perhitungan derajat kesamaan (*similarity degree*) antar tempat wisata dengan teknik `cosine similarity`, dengan menggunakan fungsi `cosine_similarity` dari library `sklearn`.
"""

from sklearn.metrics.pairwise import cosine_similarity
 
# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

"""Tahap ini merupakan tahap menghitung cosine similarity dataframe tfidf_matrix yang sudah diperoleh pada tahapan sebelumnya. Kode di atas menghasilkan keluaran berupa matriks kesamaan (similarity) dalam bentuk array. 

Selanjutnya, mari kita lihat matriks kesamaan setiap tempat wisata dengan menampilkan nama tempat wisata dalam 5 sampel kolom (axis = 1) dan 10 sampel baris (axis=0).
"""

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama tempat wisata
cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Nama wisata'], columns=data['Nama wisata'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap tempat wisata
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Dengan cosine similarity, kita berhasil mengidentifikasi kesamaan antara satu tempat wisata dengan tempat wisata lainnya. Shape (100, 100) merupakan ukuran matriks similarity dari data yang kita miliki. Berdasarkan data yang ada, matriks di atas sebenarnya berukuran 100 tempat wisata x 100 tempat wisata (masing-masing dalam sumbu X dan Y). Artinya, kita mengidentifikasi tingkat kesamaan pada 100 nama tempat wisata. Tapi tentu kita tidak bisa menampilkan semuanya. Oleh karena itu, kita hanya memilih 10 tempat wisata pada baris vertikal dan 5 tempat wisata pada sumbu horizontal seperti pada output di atas. 

Angka 1.0 mengindikasikan bahwa tempat wisata pada kolom X (horizontal) memiliki kesamaan dengan tempat wisata pada baris Y (vertikal). Sebagai contoh, tempat wisata Trinil teridentifikasi sama (similar) dengan tempat wisata Trowulan dan Museum Majapahit. Contoh lain, tempat wisata Nglirip teridentifikasi mirip dengan tempat wisata Dlundung, Sumber Maron, dan Coban Putri.
"""